rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isApprovedMember() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.approved == true;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isParticipant(participants) {
      return isAuthenticated() && participants.hasAny([request.auth.uid]);
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if true;
      allow create: if true;
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Updates collection rules
    match /updates/{updateId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Chats collection rules
    match /chats/{chatId} {
      allow read: if isAuthenticated() && (
        resource == null || // Allow reading non-existent documents
        resource.data.participants.hasAny([request.auth.uid])
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.participants.hasAny([request.auth.uid]);
      allow delete: if isAuthenticated() && resource.data.participants.hasAny([request.auth.uid]);

      // Allow access to messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        allow create: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        allow update: if isAuthenticated() && resource.data.senderId == request.auth.uid;
        allow delete: if isAuthenticated() && resource.data.senderId == request.auth.uid;
      }
    }
  }
}